
#Region ApplicationInterface

// Returns query result with no hierarchy 
// Mandatory columns: 
//	Ref, Ref, not empty - store reference 
//	Name, String, not empty - store name
//	Address, String, can be empty - store address
//	Phone, String, can be empty - store phone
//
Function GetStores() Export
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Магазины.Ссылка КАК Ref
		|ПОМЕСТИТЬ Магазины
		|ИЗ
		|	Справочник.Магазины КАК Магазины
		|ГДЕ
		|	НЕ Магазины.ПометкаУдаления
		|	И НЕ Магазины.СкладУправляющейСистемы
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Магазины.Ref КАК Ref,
		|	Магазины.Ref.Наименование КАК Name,
		|	ЕСТЬNULL(КонтактнаяИнформацияАдрес.Представление, """") КАК Address,
		|	ЕСТЬNULL(КонтактнаяИнформацияТелефон.Представление, """") КАК Phone
		|ИЗ
		|	Магазины КАК Магазины
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Магазины.КонтактнаяИнформация КАК КонтактнаяИнформацияАдрес
		|		ПО Магазины.Ref = КонтактнаяИнформацияАдрес.Ссылка
		|			И (КонтактнаяИнформацияАдрес.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.Адрес))
		|			И (КонтактнаяИнформацияАдрес.Вид = ЗНАЧЕНИЕ(Справочник.ВидыКонтактнойИнформации.ФактАдресМагазина))
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Магазины.КонтактнаяИнформация КАК КонтактнаяИнформацияТелефон
		|		ПО Магазины.Ref = КонтактнаяИнформацияТелефон.Ссылка
		|			И (КонтактнаяИнформацияТелефон.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.Телефон))
		|			И (КонтактнаяИнформацияТелефон.Вид = ЗНАЧЕНИЕ(Справочник.ВидыКонтактнойИнформации.ТелефонМагазина))";
	
	Возврат Запрос.Выполнить();
	
EndFunction

// Returns query result with hierarchy on Product
// Mandatory columns: 
//	Product, Ref, not empty - product reference
//	Store, Ref, not empty - store reference
//	Price, Number, can be zero - product price in particular store
//	Balance, Number, can be zero - product balance in particular store
//	Name, String, can be empty - product name
//	Synonym, String, can be empty - product synonym
//
Function GetProducts() Export
	
	ТаблицаЦен = ПодготовитьТаблицуЦенТоваров();
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Цены", ТаблицаЦен); 
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Цены.Номенклатура КАК Номенклатура,
		|	Цены.Магазин КАК Магазин,
		|	Цены.Цена КАК Цена
		|ПОМЕСТИТЬ втЦены
		|ИЗ
		|	&Цены КАК Цены
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ТоварыНаСкладахОстатки.Склад КАК Склад,
		|	ТоварыНаСкладахОстатки.Номенклатура КАК Номенклатура,
		|	ТоварыНаСкладахОстатки.КоличествоОстаток - ТоварыНаСкладахОстатки.РезервОстаток КАК КоличествоОстаток
		|ПОМЕСТИТЬ Остатки
		|ИЗ
		|	РегистрНакопления.ТоварыНаСкладах.Остатки(
		|			,
		|			Склад В
		|					(ВЫБРАТЬ
		|						ВЫРАЗИТЬ(втЦены.Магазин КАК Справочник.Магазины).СкладПродажи КАК Магазин
		|					ИЗ
		|						втЦены КАК втЦены)
		|				И Номенклатура В
		|					(ВЫБРАТЬ
		|						втЦены.Номенклатура КАК Номенклатура
		|					ИЗ
		|						втЦены КАК втЦены)) КАК ТоварыНаСкладахОстатки
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	втЦены.Номенклатура КАК Product,
		|	втЦены.Магазин КАК Store,
		|	втЦены.Цена КАК Price,
		|	ЕСТЬNULL(Остатки.КоличествоОстаток, 0) КАК Balance,
		|	ВЫРАЗИТЬ(втЦены.Номенклатура КАК Справочник.Номенклатура).Наименование КАК Name,
		|	ВЫРАЗИТЬ(втЦены.Номенклатура КАК Справочник.Номенклатура).ActiveIngredient КАК Synonym
		|ИЗ
		|	втЦены КАК втЦены
		|		ЛЕВОЕ СОЕДИНЕНИЕ Остатки КАК Остатки
		|		ПО (ВЫРАЗИТЬ(втЦены.Магазин КАК Справочник.Магазины).СкладПродажи = Остатки.Склад)
		|			И втЦены.Номенклатура = Остатки.Номенклатура
		|ИТОГИ
		|	МАКСИМУМ(Name),
		|	МАКСИМУМ(Synonym)
		|ПО
		|	Product";
	
	Возврат Запрос.Выполнить();
		
EndFunction

// Returns query result with no hierarchy.
// Mandatory columns: 
//	Ref, Ref, not empty - product reference
//
Function GetProductsForRecordingChanges(RecordSet) Export
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Товары", RecordSet);
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Товары.Номенклатура КАК Номенклатура
		|ПОМЕСТИТЬ втНоменклатура
		|ИЗ
		|	&Товары КАК Товары
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	втНоменклатура.Номенклатура КАК Ref
		|ИЗ
		|	втНоменклатура КАК втНоменклатура
		|ГДЕ
		|	ВЫРАЗИТЬ(втНоменклатура.Номенклатура КАК Справочник.Номенклатура).ЛекарственнаяПродукция";
	
	Возврат Запрос.Выполнить();
	
EndFunction

// Returns query result with no hierarchy.
// Mandatory columns: 
//	Ref, Ref, not empty - product reference
//
Function GetProductsForInitialExchange() Export
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Номенклатура.Ссылка КАК Ref
		|ИЗ
		|	Справочник.Номенклатура КАК Номенклатура
		|ГДЕ
		|	НЕ Номенклатура.ПометкаУдаления
		|	И Номенклатура.ЛекарственнаяПродукция";
	
	Возврат Запрос.Выполнить();
	
EndFunction

#EndRegion

#Region InternalFunctions

Функция ПодготовитьТаблицуЦенТоваров()
	
	РезультатЗапроса = РезультатЗапросаПоИзмененымТоварамСГруппировкойПоСкладам();
	ВыборкаПоМагазинам = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	ТаблицаЦен = ПустаяТаблицаЦен();
	Пока ВыборкаПоМагазинам.Следующий() Цикл
		
		Запрос = Новый Запрос;
		ЗапасыСервер.СформироватьЗапросВременнаяТаблицаТовары(Запрос.Текст);
		ЗапасыСервер.СформироватьЗапросЦеныПоРозничнымЦенам(Запрос.Текст, ВыборкаПоМагазинам.Магазин);
		
		Товары = ТаблицаТоваров(ВыборкаПоМагазинам.Выбрать());
		Запрос.УстановитьПараметр("Товары", Товары);
		Запрос.УстановитьПараметр("Дата",   ТекущаяДатаСеанса());
		Запрос.УстановитьПараметр("Магазин", ВыборкаПоМагазинам.Магазин);
		
		СтруктураРеквизитов = Новый Структура;
		СтруктураРеквизитов.Вставить("ФорматМагазина");
		СтруктураРеквизитов.Вставить("ПравилоЦенообразования");
		СтруктураРеквизитов.Вставить("ИспользоватьПрименениеЦен");
		СтруктураРеквизитов.Вставить("ВидМинимальныхЦенПродажи");
		РеквизитыМагазина = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ВыборкаПоМагазинам.Магазин, СтруктураРеквизитов);
		
		Запрос.УстановитьПараметр("ФорматОбъектаЦенообразования", РеквизитыМагазина.ФорматМагазина);
		Запрос.УстановитьПараметр("ПравилоЦенообразования", РеквизитыМагазина.ПравилоЦенообразования);
		Запрос.УстановитьПараметр("ИспользоватьПрименениеЦен", РеквизитыМагазина.ИспользоватьПрименениеЦен);
		Запрос.УстановитьПараметр("ПриводитьКМинимальнойЦене", ЗначениеЗаполнено(РеквизитыМагазина.ВидМинимальныхЦенПродажи));
		Запрос.УстановитьПараметр("ВидМинимальныхЦенПродажи", РеквизитыМагазина.ВидМинимальныхЦенПродажи);
		
		ЦеныВыборка = Запрос.Выполнить().Выбрать();
		Пока ЦеныВыборка.Следующий() Цикл
			НоваяСтрока = ТаблицаЦен.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, ЦеныВыборка);
			НоваяСтрока.Магазин = ВыборкаПоМагазинам.Магазин;
		КонецЦикла;
		
	КонецЦикла;
	Возврат ТаблицаЦен;
	
КонецФункции

Функция РезультатЗапросаПоИзмененымТоварамСГруппировкойПоСкладам()
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Магазины.Ссылка КАК Ссылка
		|ПОМЕСТИТЬ Магазины
		|ИЗ
		|	Справочник.Магазины КАК Магазины
		|ГДЕ
		|	НЕ Магазины.ПометкаУдаления
		|	И НЕ Магазины.СкладУправляющейСистемы
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ИзмененныеТовары.Product КАК Номенклатура
		|ПОМЕСТИТЬ Товары
		|ИЗ
		|	&ИзмененныеТовары КАК ИзмененныеТовары
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Магазины.Ссылка КАК Магазин,
		|	Товары.Номенклатура КАК Номенклатура
		|ИЗ
		|	Магазины КАК Магазины,
		|	Товары КАК Товары
		|ИТОГИ ПО
		|	Магазин";
	
	Запрос.УстановитьПараметр("ИзмененныеТовары", ТаблицаИзмененныхТоваров());
	Возврат Запрос.Выполнить();
	
КонецФункции

Функция ПустаяТаблицаЦен()
	
	Результат = Новый ТаблицаЗначений();
	Результат.Колонки.Добавить("Номенклатура", Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
	Результат.Колонки.Добавить("Магазин", Новый ОписаниеТипов("СправочникСсылка.Магазины"));
	Результат.Колонки.Добавить("Цена", ОбщегоНазначения.ОписаниеТипаЧисло(15,2));
	Возврат Результат;
	
КонецФункции

Функция ТаблицаТоваров(ТоварыВыборка)
	
	Товары = ПустаяТаблицаТоваров();
	Счетчик = 0;
	Пока ТоварыВыборка.Next() Цикл
		НоваяСтрока = Товары.Добавить();
		НоваяСтрока.НомерСтроки = Счетчик;
		ЗаполнитьЗначенияСвойств(НоваяСтрока, ТоварыВыборка);			
		Счетчик = Счетчик + 1;	
	КонецЦикла;
	
	Возврат Товары;
	
КонецФункции

Функция ПустаяТаблицаТоваров()
	
	Результат = Новый ТаблицаЗначений();
	Результат.Колонки.Добавить("НомерСтроки", ОбщегоНазначения.ОписаниеТипаЧисло(3));
	Результат.Колонки.Добавить("Номенклатура", Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
	Результат.Колонки.Добавить("Характеристика", Новый ОписаниеТипов("СправочникСсылка.ХарактеристикиНоменклатуры"));
	Результат.Колонки.Добавить("Упаковка", Новый ОписаниеТипов("СправочникСсылка.УпаковкиНоменклатуры"));
	Возврат Результат;
	
КонецФункции

Функция ТаблицаИзмененныхТоваров()
	
	Таблица = ПустаяТаблицаИзмененныхТоваров();
	ПланыОбмена.ExchangeChatBot.FillChagnedProducts(Таблица);
	Если Таблица.Количество() Тогда
		ChatBotService.InfoLog(
			СтрШаблон(НСтр("ru = 'Найдено %1 измененных товаров.'"), Таблица.Количество()));		
	КонецЕсли;
	Возврат Таблица;
	
КонецФункции

Функция ПустаяТаблицаИзмененныхТоваров()
	
	Результат = Новый ТаблицаЗначений();
	Результат.Колонки.Добавить("Product", Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
	Возврат Результат;
	
КонецФункции

#EndRegion